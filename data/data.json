{
    "head": {
        "url": "https://next-three-js-test.vercel.app/"
    },
    "header": {
        "title":"Next-three-js-test",
        "text": "Next.js環境でthree.jsを動かす"
    },
    "link": {
        "repository": "https://github.com/ryo-i/next-three-js-test/",
        "testPath": "blob/main/components/"
    },
    "test": {
        "test001": {
            "id": "001",
            "title":"Next + Three.js",
            "text": "はじめのいっぽ。Next.js環境でthree.jsが動くかテスト",
            "blog": "https://www.i-ryo.com/entry/2022/11/15/133243"
        },
        "test002": {
            "id": "002",
            "title":"線を引く(LineBasicMaterial)",
            "text": "LineBasicMaterialを使って線を引く",
            "blog": ""
        },
        "test003": {
            "id": "003",
            "title":"線をランダムに引く(LineBasicMaterial)",
            "text": "LineBasicMaterialとMath.random()で線をランダムに引く",
            "blog": ""
        },
        "test004": {
            "id": "004",
            "title":"テキストを作成する(TextGeometry)",
            "text": "TextGeometryでテキストを作成する",
            "blog": ""
        },
        "test005": {
            "id": "005",
            "title":"日本語テキストを作成する(TextGeometry)",
            "text": "TextGeometryで日本語フォントを読み込む",
            "blog": ""
        },
        "test006": {
            "id": "006",
            "title":"3Dモデルを読み込む(GLTFLoader)",
            "text": "GLTFLoaderでgltf形式の3Dモデルを読み込む",
            "blog": ""
        },
        "test007": {
            "id": "007",
            "title":"react-three-fiber",
            "text": "react-three-fiberで立体を表示する",
            "blog": ""
        },
        "test008": {
            "id": "008",
            "title":"キューブを複数配置(BoxGeometry)",
            "text": "キューブ作成を関数化し、色や位置を引数で指定して複数配置する",
            "blog": ""
        },
        "test009": {
            "id": "009",
            "title":"二次元の円(CircleGeometry)",
            "text": "CircleGeometryで二次元の円を作る",
            "blog": ""
        },
        "test010": {
            "id": "010",
            "title":"円錐(ConeGeometry)",
            "text": "ConeGeometryで円錐を作る",
            "blog": ""
        },
        "test011": {
            "id": "011",
            "title":"円筒(CylinderGeometry)",
            "text": "CylinderGeometryで円筒を作る",
            "blog": ""
        },
        "test012": {
            "id": "012",
            "title":"十二面体(DodecahedronGeometry)",
            "text": "DodecahedronGeometryで十二面体を作る",
            "blog": ""
        },
        "test013": {
            "id": "013",
            "title":"2次元パスを押し出す(ExtrudeGeometry)",
            "text": "ExtrudeGeometryで2次元パスを押し出す。ベベル機能もつける。",
            "blog": ""
        },
        "test014": {
            "id": "014",
            "title":"二十面体(IcosahedronGeometry)",
            "text": "IcosahedronGeometryで二十面体を作る。",
            "blog": ""
        },
        "test015": {
            "id": "015",
            "title":"ろくろ回し的な形状(LatheGeometry)",
            "text": "LatheGeometryで線を回転させてできる形状を作る。",
            "blog": ""
        },
        "test016": {
            "id": "016",
            "title":"八面体(OctahedronGeometry)",
            "text": "OctahedronGeometryで八面体を作る。",
            "blog": ""
        },
        "test017": {
            "id": "017",
            "title":"関数を与えることでできる表面(ParametricGeometry)",
            "text": "ParametricGeometryで関数を与えることでできる表面を作る。",
            "blog": ""
        },
        "test018": {
            "id": "018",
            "title":"2次元の四角形(PlaneGeometry)",
            "text": "PlaneGeometryで2次元の四角形を作る。",
            "blog": ""
        },
        "test019": {
            "id": "019",
            "title":"三角形を集めた球体(PolyhedronGeometry)",
            "text": "PolyhedronGeometryで三角形を点の周りに集めて球体にする",
            "blog": ""
        },
        "test020": {
            "id": "020",
            "title":"真ん中に穴のあいた円盤(RingGeometry)",
            "text": "RingGeometryで真ん中に穴のあいた円盤を作る",
            "blog": ""
        },
        "test021": {
            "id": "021",
            "title":"三角形分割された2次元の輪郭(ShapeGeometry)",
            "text": "ShapeGeometryで三角形分割された2次元の輪郭を作る",
            "blog": ""
        },
        "test022": {
            "id": "022",
            "title":"球体(SphereGeometry)",
            "text": "SphereGeometryで球体を作る",
            "blog": ""
        },
        "test023": {
            "id": "023",
            "title":"四面体(TetrahedronGeometry)",
            "text": "TetrahedronGeometryで四面体（4面のもの）を作る",
            "blog": ""
        },
        "test024": {
            "id": "024",
            "title":"ドーナツ(TorusGeometry)",
            "text": "TorusGeometryで円環（ドーナツ）を作る",
            "blog": ""
        },
        "test025": {
            "id": "025",
            "title":"結び目(TorusKnotGeometry)",
            "text": "TorusKnotGeometryで円環（結び目）を作る",
            "blog": ""
        },
        "test026": {
            "id": "026",
            "title":"経路をなぞらせた管(TubeGeometry)",
            "text": "TubeGeometryで経路をなぞらせた管を作る",
            "blog": ""
        },
        "test027": {
            "id": "027",
            "title":"エッジを表示(EdgesGeometry)",
            "text": "EdgesGeometryでエッジを表示する（ヘルパーオブジェクト）",
            "blog": ""
        },
        "test028": {
            "id": "028",
            "title":"ワイヤーフレームを表示(WireframeGeometry)",
            "text": "WireframeGeometryでワイヤーフレームを表示する（ヘルパーオブジェクト）",
            "blog": ""
        },
        "test029": {
            "id": "029",
            "title":"各頂点の点を描画(PointsMaterial)",
            "text": "PointsMaterialで各頂点の点を描画する",
            "blog": ""
        },
        "test030": {
            "id": "030",
            "title":"シーングラフ",
            "text": "ノードの階層関係を設定する",
            "blog": ""
        },
        "test031": {
            "id": "031",
            "title":"マテリアル(Basic,Lambert,Phong)",
            "text": "MeshBasicMaterialは陰影なし、MeshLambertMaterialはマット調、MeshPhongMaterialは光沢あり",
            "blog": ""
        },
        "test032": {
            "id": "032",
            "title":"マテリアル(MeshToonMaterial)",
            "text": "MeshToonMaterialは2Dアニメ調(MeshPhongMaterialとの比較)",
            "blog": ""
        },
        "test033": {
            "id": "033",
            "title":"マテリアル(Standard, Physical)",
            "text": "MeshStandardMaterialは反射の粗さ&金属っぽさ,MeshPhysicalMaterialはさらに光沢層と光沢層の粗さ(MeshPhongMaterialとの比較)",
            "blog": ""
        },
        "test034": {
            "id": "034",
            "title":"マテリアル(Dept, Normal)",
            "text": "MeshDepthMaterialはカメラに近いほど白・遠いほど黒(ほとんど違いがない)、MeshNormalMaterialは法線(表面の方向)によって色が変わる(ライトがなくても表示される)",
            "blog": ""
        },
        "test035": {
            "id": "035",
            "title":"テクスチャー(TextureLoader)",
            "text": "TextureLoaderで画像ファイルを読み込みマテリアルに貼り付ける(同じ画像で異なるジオメトリの比較)",
            "blog": ""
        },
        "test036": {
            "id": "036",
            "title": "点をランダムに配置(PointsMaterial)",
            "text": "以前、LineBasicMaterialで線をランダムに引いた形をベースにPointsMaterialで点をランダムに配置",
            "blog": ""
        },
        "test037": {
            "id": "037",
            "title": "カメラ位置の制御(OrbitControls)",
            "text": "OrbitControlsでカメラ位置を動的に制御できるようにする",
            "blog": ""
        },
        "test038": {
            "id": "038",
            "title": "点のランダム配置＆カメラ位置制御",
            "text": "PointsMaterialの点ランダム配置＆OrbitControlsのカメラ位置制御",
            "blog": ""
        },
        "test039": {
            "id": "039",
            "title": "環境光源(AmbientLight)",
            "text": "AmbientLightは陰影がベタっぽくなるライト。ライトの色を変更するカラーピッカーも追加",
            "blog": ""
        },
        "test040": {
            "id": "040",
            "title": "半球光源(HemisphereLight)",
            "text": "HemisphereLightは陰影がつくライト。空と地面のライトの色を設定できる",
            "blog": ""
        },
        "test041": {
            "id": "041",
            "title": "平行光源(DirectionalLight)",
            "text": "DirectionalLightは太陽のようなライト",
            "blog": ""
        },
        "test042": {
            "id": "042",
            "title": "点光源(PointLight)",
            "text": "PointLightはある点から全方向に光を放つライト",
            "blog": ""
        },
        "test043": {
            "id": "043",
            "title": "集中光線(SpotLight)",
            "text": "SpotLightは円錐体のライト。angleで円錐の角度、penumbraで内側のフェードを設定",
            "blog": ""
        }
    },
    "footer": {
        "text": "©️ イイダリョウ"
    }
}